// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesOrder.Database;

#nullable disable

namespace SalesOrder.Database.Migrations
{
    [DbContext(typeof(SalesContext))]
    [Migration("20230222050605_UpdateOrderWithVAT")]
    partial class UpdateOrderWithVAT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesOrder.Database.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0a027927-135d-4ac0-b55d-efb28d0118e4"),
                            CategoryCode = "CAT#1",
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(6208),
                            Description = "Category #1 Mock",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("d6fbcfc5-e4dd-4b66-8098-d56f5e1408a6"),
                            CategoryCode = "CAT#2",
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(6213),
                            Description = "Category #2 Mock",
                            IsActive = true
                        },
                        new
                        {
                            Id = new Guid("42be8c07-c7e6-4582-a980-918e769f809d"),
                            CategoryCode = "CAT#3",
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(6214),
                            Description = "Category #3 Mock",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("46798df4-d5b9-4dd8-95a0-f8f8bfb172f8"),
                            Address = "123 Main Street, Anytown, USA",
                            ContactNumber = "081-3110121",
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            CustomerCode = "CUS#1",
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(5361),
                            Email = "golden@nomail.com",
                            IsActive = true,
                            Name = "Golden Gate Consulting"
                        },
                        new
                        {
                            Id = new Guid("892228bf-8380-419d-9518-a310f74e30c5"),
                            Address = "456 Oak Avenue, Somewhereville, Canada",
                            ContactNumber = "051-9182102",
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            CustomerCode = "CUS#2",
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(5365),
                            Email = "summit@nomail.com",
                            IsActive = true,
                            Name = "Summit Solutions Inc."
                        });
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductTotal")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VAT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("SalesOrder.Database.Models.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurrentProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts", (string)null);
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d0bcb8d-e459-4885-975a-588741fe1905"),
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(7207),
                            Description = "Product #1 Description",
                            IsActive = true,
                            Name = "Product #1",
                            Price = 20m,
                            ProductCode = "PROD#1"
                        },
                        new
                        {
                            Id = new Guid("760f4974-68d6-4403-aff6-29ef670abd01"),
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(7213),
                            Description = "Product #2 Description",
                            IsActive = true,
                            Name = "Product #2",
                            Price = 40m,
                            ProductCode = "PROD#2"
                        },
                        new
                        {
                            Id = new Guid("4194ff3b-0c2d-456b-8314-08f7ee3bc8e0"),
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(7215),
                            Description = "Product #3 Description",
                            IsActive = true,
                            Name = "Product #3",
                            Price = 60m,
                            ProductCode = "PROD#3"
                        });
                });

            modelBuilder.Entity("SalesOrder.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            CreatedById = new Guid("418eca24-a89f-4310-a8a0-6d12dd96dc6a"),
                            DateCreated = new DateTime(2020, 5, 28, 7, 6, 4, 945, DateTimeKind.Local).AddTicks(4157),
                            FirstName = "System",
                            IsActive = true,
                            LastName = "User",
                            UserCode = "USR#1"
                        });
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Category", b =>
                {
                    b.HasOne("SalesOrder.Database.Models.User", null)
                        .WithMany("Categories")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Customer", b =>
                {
                    b.HasOne("SalesOrder.Database.Models.User", null)
                        .WithMany("Customers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Order", b =>
                {
                    b.HasOne("SalesOrder.Database.Models.Category", "Category")
                        .WithMany("Orders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesOrder.Database.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesOrder.Database.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.OrderProduct", b =>
                {
                    b.HasOne("SalesOrder.Database.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesOrder.Database.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Product", b =>
                {
                    b.HasOne("SalesOrder.Database.Models.User", null)
                        .WithMany("Products")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Category", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("SalesOrder.Database.Models.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Customers");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
